<?php
/**
 * @var $block \MagoArab\CdnIntegration\Block\Adminhtml\System\Config\UrlAnalyzer
 */
?>
<div class="url-analyzer-section">
    <div class="url-analyzer-content">
<div class="url-analyzer-form fieldset">
            <div class="field">
                <div class="control">
                   <div class="url-analyzer-box">
                        <h3 class="url-box-title"><?= __('CDN URL Analyzer') ?></h3>
                        <p class="url-box-description">
                            <?= __('Discover and integrate your store assets with CDN for faster loading times and better performance.') ?>
                        </p>

                        <div class="url-box-container">
                            <div class="field url-field">
                                <label for="page_url_to_analyze" class="label">
                                    <span><?= __('Page URL to Analyze') ?></span>
                                </label>
                                <div class="control">
                                    <input type="text" id="page_url_to_analyze" class="input-text" 
                                        placeholder="<?= __('https://yourstore.com/category/products.html') ?>" 
                                        value="<?= $block->getStoreUrl() ?>">
                                </div>
                                <div class="url-description">
                                    <?= __('By default, the homepage will be analyzed. For better coverage, add URLs to specific categories, products, or any other pages from your store. The CDN will automatically serve all discovered static files.') ?>
                                </div>
                            </div>
							<div class="field advanced-options-field">
                                <label class="label">
                                    <span><?= __('Advanced Options') ?></span>
                                </label>
                                <div class="control">
                                    <div class="admin__field-option">
                                        <input type="checkbox" id="scan_linked_pages" name="scan_linked_pages" value="1" class="admin__control-checkbox">
                                        <label for="scan_linked_pages" class="admin__field-label">
                                            <?= __('Automatically scan linked pages (discovers more assets but takes longer)') ?>
                                        </label>
                                    </div>
                                </div>
                                <div class="linked-pages-options" style="display: none;">
                                    <select id="scan_depth" class="admin__control-select">
                                        <option value="1"><?= __('1 level deep (faster)') ?></option>
                                        <option value="2"><?= __('2 levels deep (recommended)') ?></option>
                                        <option value="3"><?= __('3 levels deep (thorough)') ?></option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="actions actions-analyze">
                                <?= $block->getButtonHtml() ?>
                            </div>
        <div id="url-analyzer-results" class="url-analyzer-results" style="display: none;">
            <div class="results-container">
                <h3 class="results-title"><?= __('URLs Found') ?></h3>
                <p class="results-subtitle"><?= __('Select the URLs you want to serve via CDN:') ?></p>
                
                <div class="url-list"></div>
                
                <div class="url-actions">
                    <button type="button" id="select-all-urls" class="action-secondary">
                        <span><?= __('Select All') ?></span>
                    </button>
                    <button type="button" id="add-selected-urls" class="action-primary">
                        <span><?= __('Add Selected URLs') ?></span>
                    </button>
                    <button type="button" id="upload-to-github" class="action-primary">
                        <span><?= __('Upload to GitHub') ?></span>
                    </button>
                </div>
                
                <div id="upload-progress" class="upload-progress" style="display: none;">
                    <div class="progress-status"></div>
                    <div class="progress-bar-container">
                        <div class="progress-bar"></div>
                    </div>
                    <div class="upload-details" style="display: none;">
                        <div class="upload-stats"></div>
                        <div class="current-file-container">
                            <span class="current-file-label"><?= __('Current file') ?>:</span> 
                            <span class="current-file"></span>
                        </div>
                    </div>
                </div>
                
                <div id="upload-result" class="upload-result" style="display: none;"></div>
				                        <div id="cdn-performance-visualization" class="cdn-performance-visualization" style=" margin-top: 20px;">
    <h3 class="visualization-title"><?= __('Performance Impact Analysis') ?></h3>
    <div class="visualization-container">
        <div class="performance-comparison">
            <div class="performance-before">
                <h4><?= __('Before CDN') ?></h4>
                <div class="performance-chart">
                    <div class="loading-time-chart">
                        <span class="chart-label"><?= __('Est. Loading Time') ?></span>
                        <div class="chart-value before-loading-time">0s</div>
                    </div>
                </div>
            </div>
            <div class="performance-arrow">â†’</div>
            <div class="performance-after">
                <h4><?= __('After CDN') ?></h4>
                <div class="performance-chart">
                    <div class="loading-time-chart">
                        <span class="chart-label"><?= __('Est. Loading Time') ?></span>
                        <div class="chart-value after-loading-time">0s</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="performance-metrics">
            <div class="metric-item">
                <span class="metric-label"><?= __('CDN Coverage') ?></span>
                <div class="metric-chart">
                    <div class="progress-circular">
                        <svg viewBox="0 0 100 100">
                            <circle class="progress-bg" cx="50" cy="50" r="40"></circle>
                            <circle class="progress-fg cdn-coverage-circle" cx="50" cy="50" r="40"></circle>
                        </svg>
                        <div class="progress-percentage cdn-coverage-value">0%</div>
                    </div>
                </div>
            </div>
            <div class="metric-item">
                <span class="metric-label"><?= __('Server Load Reduction') ?></span>
                <div class="metric-chart">
                    <div class="progress-circular">
                        <svg viewBox="0 0 100 100">
                            <circle class="progress-bg" cx="50" cy="50" r="40"></circle>
                            <circle class="progress-fg server-load-circle" cx="50" cy="50" r="40"></circle>
                        </svg>
                        <div class="progress-percentage server-load-value">0%</div>
                    </div>
                </div>
            </div>
            <div class="metric-item">
                <span class="metric-label"><?= __('Global Reach') ?></span>
                <div class="metric-chart">
                    <div class="progress-circular">
                        <svg viewBox="0 0 100 100">
                            <circle class="progress-bg" cx="50" cy="50" r="40"></circle>
                            <circle class="progress-fg global-reach-circle" cx="50" cy="50" r="40"></circle>
                        </svg>
                        <div class="progress-percentage global-reach-value">0%</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
            </div>
            <div class="performance-tip" style="margin: 15px 0; padding: 10px; background: #fffbf0; border-left: 3px solid #ed8a19;">
    <strong><?= __('Performance Tip') ?>:</strong> 
    <?= __('Enable Performance Optimization in the settings to add lazy loading, JS defer and HTML minification automatically!') ?>
</div>
            <div class="debug-container">
                <div class="actions actions-debug-info">
                    <button type="button" id="show-debug-info" class="action-secondary">
                        <span><?= __('Show Debug Information') ?></span>
                    </button>
                </div>
                
                <div id="debug-info" class="debug-info" style="display: none;">
                    <h4 class="debug-title"><?= __('Debug Information') ?></h4>
                    <div class="debug-content"></div>
                </div>
            </div>
        </div>

    </div>
</div>
 </div>
</div>
</div>
</div>
</div>
<style>
/* Performance Visualization Styles */
.cdn-performance-visualization {
    background: #ffffff;
    border: 1px solid #cccccc;
    border-radius: 4px;
    padding: 20px;
    margin-bottom: 25px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.visualization-title {
    color: #eb5202;
    font-size: 1.5rem;
    margin: 0 0 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e3e3e3;
    font-weight: 600;
}

.visualization-container {
    display: flex;
    flex-direction: column;
    gap: 30px;
}

.performance-comparison {
    display: flex;
    justify-content: space-around;
    align-items: center;
    padding: 20px 0;
}

.performance-before, .performance-after {
    text-align: center;
    padding: 15px;
    border-radius: 8px;
    width: 40%;
    min-height: 150px;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.performance-before {
    background: #f9f9f9;
    border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.performance-after {
    background: #f0f8ff;
    border: 1px solid #b3d8ff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.performance-before h4, .performance-after h4 {
    font-size: 1.2rem;
    margin: 0 0 15px;
    color: #333333;
}

.performance-after h4 {
    color: #0066cc;
}

.performance-arrow {
    font-size: 2.5rem;
    color: #aaaaaa;
    margin: 0 10px;
}

.performance-chart {
    padding: 10px;
}

.loading-time-chart {
    text-align: center;
}

.chart-label {
    display: block;
    font-size: 14px;
    color: #666666;
    margin-bottom: 8px;
}

.chart-value {
    font-size: 2.2rem;
    font-weight: bold;
}

.before-loading-time {
    color: #e67e22;
}

.after-loading-time {
    color: #27ae60;
}

.performance-metrics {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
}

.metric-item {
    flex: 1;
    min-width: 200px;
    text-align: center;
    padding: 15px;
    border-radius: 8px;
    background: #ffffff;
    border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.metric-label {
    display: block;
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 15px;
    color: #555555;
}

.metric-chart {
    position: relative;
    height: 120px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.progress-circular {
    position: relative;
    width: 100px;
    height: 100px;
}

.progress-circular svg {
    transform: rotate(-90deg);
}

.progress-bg {
    fill: none;
    stroke: #f0f0f0;
    stroke-width: 8;
}

.progress-fg {
    fill: none;
    stroke-width: 8;
    stroke-linecap: round;
    transition: stroke-dashoffset 1s ease-out;
    stroke-dasharray: 251.2;
    stroke-dashoffset: 251.2; /* 2 * PI * 40 = 251.2 */
}

.cdn-coverage-circle {
    stroke: #3498db;
}

.server-load-circle {
    stroke: #2ecc71;
}

.global-reach-circle {
    stroke: #9b59b6;
}

.progress-percentage {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1.5rem;
    font-weight: bold;
    color: #333333;
}
.url-analyzer-section {
    margin-bottom: 0.1rem;
    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.url-analyzer-content {
    width: 100%;
    max-width: 1200px;
}
.url-analyzer-description {
    margin-bottom: 1.8rem;
    font-size: 14px;
    line-height: 1.6;
    color: #41362f;
}
.url-analyzer-form {
    margin-bottom: 2rem;
}.field.advanced-options-field label {
    text-align: left !important;
}
.url-analyzer-form.fieldset .control {
    width: 100% !important;
}
.url-analyzer-form-title {
    margin-bottom: 1.2rem;
    font-size: 1.6rem;
    font-weight: 600;
    color: #303030 !important;
}
.url-analyzer-box {
    background: #ffffff !important;
    border: 1px solid #cccccc !important;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    padding: 0;
    margin-bottom: 2.5rem;
    overflow: hidden;
}tr#row_magoarab_cdn_url_analyzer_analyze_urls .value {
    width: 100% !important;
}
tr#row_magoarab_cdn_url_analyzer_analyze_urls td.label {
    width: 10% !important;
	Display:none !important;
} 
button#analyze_urls_button {
    background: #080808 !important;
    border-color: #030303 !important;
    color: #ffffff !important;
}
button#analyze_urls_button:hover {
    background: #4CAF50 !important;
    border-color: #030303 !important;
    color: #ffffff !important;
}
button#add-selected-urls {
    background: #9E9E9E;
}
button#upload-to-github {
    background: #4CAF50;
    padding: 0px 25px;
    color: white;
    border: none;
    border-radius: 4px;
    transition: all 0.3s ease;
    cursor: pointer;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

button#upload-to-github:hover {
    background: #8BC34A;
    transform: translateY(-4px); /* ÙŠØªØ­Ø±Ùƒ Ù„Ø£Ø¹Ù„Ù‰ */
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Ø¸Ù„ Ø£Ø¹Ù…Ù‚ */
}

button#select-all-urls {
    background: #000000;
    color: #fff !important;
}
button#select-all-urls:hover {
    background: #4CAF50;
    color: #fff !important;
}
.url-box-title {
    color: #ffffff !important;
    font-size: 1.5rem;
    margin: 0;
    padding: 18px 25px;
    border-bottom: 1px solid #e3e3e3 !important;
    background: #eb5202;
    font-weight: 600;
}
.url-box-description {
    color: #555555 !important;
    margin: 0;
    padding: 20px 25px 5px;
    font-size: 14px;
    line-height: 1.5;
}
.url-box-container {
    padding: 5px 25px 25px;
}
.url-field {
    margin-bottom: 2rem;
}
.url-field .label {
    font-weight: 600;
    margin-bottom: 0.8rem;
    display: block;
    color: #303030;
    font-size: 14px;
}
label.label[for="page_url_to_analyze"] {
    text-align: left !important;
    padding: 0 !important;
}
.url-field .input-text {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #d1d1d1 !important;
    border-radius: 3px;
    font-size: 14px;
    transition: border-color 0.2s;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.06);
}
.url-field .input-text:focus {
    border-color: #eb5202;
    box-shadow: 0 0 5px rgba(92,106,195,0.2);
    outline: none;
}
.url-description {
    margin-top: 10px;
    color: #666666;
    font-size: 13px;
    line-height: 1.5;
	    float: left;
}
.url-analyzer-form.fieldset {
    padding: 0 !important;
    margin: 0 !important;
}
.advanced-options-field {
    margin-bottom: 2rem;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 4px;
    border-left: 3px solid #eb5202;
}
.advanced-options-field .label {
    font-weight: 600;
    margin-bottom: 0.8rem;
    display: block;
    color: #303030;
    font-size: 14px;
}
.linked-pages-options {
    margin-top: 12px;
    margin-left: 28px;
    padding: 8px 0;
}
.linked-pages-options select {
    padding: 8px 12px;
    border: 1px solid #d1d1d1;
    border-radius: 3px;
    background-color: #ffffff !important;
}
.actions-analyze {
    text-align: right;
    margin-top: 25px;
}

/* Results section styles */
.url-analyzer-results {
    margin-top: 2.5rem;
}
.results-container {
    background: #ffffff;
    border: 1px solid #cccccc;
    border-radius: 4px;
    padding: 0;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    overflow: hidden;
}
.results-title {
    font-size: 1.5rem;
    margin: 0;
    padding: 18px 25px;
    border-bottom: 1px solid #e3e3e3;
    background: #eb5202;
    color: #ffffff !important;
    font-weight: 600;
}
.results-subtitle {
    margin: 0;
    padding: 15px 25px;
    font-size: 14px;
    color: #555555;
}
.url-list {
    max-height: 320px;
    overflow-y: auto;
    padding: 0;
    background: #fff;
    border: 1px solid #e3e3e3;
    margin: 0 25px 25px;
    border-radius: 3px;
}
.url-item {
    padding: 12px 15px;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.15s;
}
.url-item:hover {
    background-color: #f8f9ff;
}
.url-item:last-child {
    border-bottom: none;
}
.url-item label {
    font-family: 'Consolas', 'Monaco', monospace;
    word-break: break-all;
    padding-left: 8px;
    font-size: 13px;
    color: #444;
}
.url-item input[type="checkbox"] {
    margin-top: 3px;
    vertical-align: top;
}
.url-actions {
    display: flex;
    justify-content: space-between;
    padding: 0 25px 25px;
}
.action-secondary {
    background: #f1f1f1;
    border: 1px solid #d1d1d1;
    color: #333333;
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 600;
    border-radius: 3px;
    cursor: pointer;
    transition: all 0.2s;
}
.action-secondary:hover {
    background: #e3e3e3;
}
.action-primary {
    background: #eb5202;
    border: 1px solid #4c59a3;
    color: #ffffff !important;
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 600;
    border-radius: 3px;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 2px 3px rgba(0,0,0,0.1);
}
.action-primary:hover {
    background: #4c59a3;
}
.url-actions .action-secondary {
    margin-right: 10px;
}
.url-actions .action-primary {
    margin-left: 10px;
}
.upload-progress {
    padding: 20px 25px;
    border-top: 1px solid #e3e3e3;
    background: #f9f9f9;
}
.progress-status {
    margin-bottom: 12px;
    font-weight: 600;
    color: #444444;
    font-size: 14px;
}
.progress-bar-container {
    height: 20px;
    background-color: #eeeeee;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
}
.progress-bar {
    height: 100%;
    width: 0;
    background-color: #4caf50;
    border-radius: 10px;
    transition: width 0.3s ease;
    background-image: linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-size: 40px 40px;
    animation: progress-bar-stripes 2s linear infinite;
}
@keyframes progress-bar-stripes {
    from { background-position: 40px 0; }
    to { background-position: 0 0; }
}
.upload-details {
    margin-top: 10px;
    font-size: 13px;
}
.upload-stats {
    margin-bottom: 5px;
}
.current-file {
    font-family: monospace;
    display: inline-block;
    max-width: 90%;
    overflow: hidden;
    text-overflow: ellipsis;
    vertical-align: bottom;
}
.upload-result {
    padding: 15px 20px;
    border-top: 1px solid #e3e3e3;
}
.debug-container {
    margin-top: 1rem;
    text-align: right;
}
.debug-info {
    margin-top: 1rem;
    border: 1px solid #ddd;
    border-radius: 3px;
    background: #f9f9f9;
    text-align: left;
}
.debug-title {
    margin: 0;
    padding: 10px 15px;
    border-bottom: 1px solid #ddd;
    background: #eee;
    color: #333;
}
.debug-content {
    max-height: 200px;
    overflow-y: auto;
    padding: 15px;
    white-space: pre-wrap;
    font-family: monospace;
    font-size: 12px;
}
.url-analyzer-footer {
    margin-top: 1rem;
}
.url-analyzer-help-text {
    color: #666;
    font-size: 0.9em;
}

/* Empty results message */
.empty-results {
    padding: 30px 20px;
    text-align: center;
    color: #666666;
    background: #f9f9f9;
    border-radius: 3px;
}
.empty-results p {
    margin: 0 0 1rem;
    line-height: 1.6;
    font-size: 14px;
}
.empty-results:before {
    content: "!";
    display: block;
    width: 50px;
    height: 50px;
    margin: 0 auto 15px;
    font-size: 30px;
    line-height: 48px;
    border: 2px solid #e0e0e0;
    border-radius: 50%;
    color: #999999;
    font-weight: bold;
}
</style>
<script>
require([
    'jquery',
    'Magento_Ui/js/modal/modal',
    'Magento_Ui/js/modal/confirm',
    'Magento_Ui/js/modal/alert',
    'mage/translate'
], function ($, modal, confirm, alert, $t) {
    'use strict';

    // Debug log function
    function debugLog(message, data) {
        var timestamp = new Date().toISOString();
        var logMessage = '[' + timestamp + '] ' + message;
        if (data) {
            if (typeof data === 'object') {
                logMessage += '\n' + JSON.stringify(data, null, 2);
            } else {
                logMessage += '\n' + data;
            }
        }
        console.log('[CDN Debug] ' + logMessage);
        
        // Add to debug panel without showing it
        var $debugContent = $('#debug-info .debug-content');
        if ($debugContent.length) {
            $debugContent.append(logMessage + '\n\n');
            // Do NOT show debug info automatically
            $debugContent.scrollTop($debugContent[0].scrollHeight);
        }
    }

    // Init debug panel
    $('#debug-info .debug-content').empty();
    debugLog('Debug initialized. PHP version: <?= phpversion() ?>');
    debugLog('Form Key: ' + window.FORM_KEY);
    
    // Log URLs for debugging
    var analyzeUrl = '<?= $block->escapeJs($block->getAjaxUrl()) ?>';
    var uploadUrl = '<?= $block->escapeJs($block->getUrl('magoarab_cdn/cdn/uploadToGithub', ['_secure' => true])) ?>';
    debugLog('Analyze URL: ' + analyzeUrl);
    debugLog('Upload URL: ' + uploadUrl);

    // Setup show debug info button
    $(document).ready(function() {
        // Make sure debug info is hidden on load
        $('#debug-info').hide();
        
        // Setup toggle button for debug info
        $('#show-debug-info').click(function() {
            $('#debug-info').toggle();
            $(this).find('span').text(
                $('#debug-info').is(':visible') ? 
                $t('Hide Debug Information') : 
                $t('Show Debug Information')
            );
        });
        
        // Setup advanced options toggle
        $('#scan_linked_pages').change(function() {
            if ($(this).is(':checked')) {
                $('.linked-pages-options').slideDown(200);
            } else {
                $('.linked-pages-options').slideUp(200);
            }
        });
    });

    // Prevent form submission when clicking buttons
    $(document).on('click', '#select-all-urls, #add-selected-urls, #upload-to-github', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    });

    $('#analyze_urls_button').click(function (event) {
        event.preventDefault();

        $(this).prop('disabled', true);
        $(this).find('span').text($t('Analyzing...'));
        
        // Get analysis parameters
        var urlToAnalyze = $('#page_url_to_analyze').val().trim();
        var scanLinkedPages = $('#scan_linked_pages').is(':checked');
        var scanDepth = $('#scan_depth').val();
        
        debugLog('Starting URL analysis', {
            url: urlToAnalyze,
            scanLinkedPages: scanLinkedPages,
            scanDepth: scanDepth
        });
        
        // Get existing URLs
        var existingUrls = [];
        var customUrlsTextarea = $('#magoarab_cdn_custom_urls_custom_url_list');
        
        if (customUrlsTextarea.length && customUrlsTextarea.val().trim()) {
            existingUrls = customUrlsTextarea.val().trim().split("\n");
            debugLog('Existing URLs found in Custom URLs list', existingUrls);
        }
		$.ajax({
            url: analyzeUrl,
            type: 'POST',
            dataType: 'json',
            data: {
                form_key: window.FORM_KEY,
                store_url: '<?= $block->escapeJs($block->getStoreUrl()) ?>',
                specific_url: urlToAnalyze,
                existing_urls: JSON.stringify(existingUrls),
                scan_linked_pages: scanLinkedPages ? 1 : 0,
                scan_depth: scanDepth
            },
            showLoader: true,
            success: function (response) {
                debugLog('Analysis AJAX success', response);
                if (response.success) {
                    // Show results section
                    $('#url-analyzer-results').show();
                    
                    // Clear previous results
                    $('#url-analyzer-results .url-list').empty();
                    $('#upload-result').hide();
                    
                    // Hide progress
                    $('#upload-progress').hide();
                    
                    // Add each URL as a checkbox
                    if (response.urls && response.urls.length > 0) {
						
                        debugLog('Found ' + response.urls.length + ' URLs');
                        $.each(response.urls, function(index, url) {
                            $('#url-analyzer-results .url-list').append(
                                '<div class="url-item">' +
                                '<input type="checkbox" id="url-' + index + '" value="' + url + '"/> ' +
                                '<label for="url-' + index + '">' + url + '</label>' +
                                '</div>'
                            );
                        });
						updatePerformanceVisualization(response.urls);
                    } else {
                        debugLog('No URLs found');
                        $('#url-analyzer-results .url-list').html(
                            '<div class="empty-results">' +
                            '<p>' + $t('No new URLs found in this page. These files might already be in your custom URL list or they are core files that should not be served via CDN. Try analyzing different pages such as category, product, or content pages.') + '</p>' +
                            '</div>'
                        );
                    }
                } else {
                    debugLog('Analysis failed', response.message);
                    alert({
                        title: $t('Error'),
                        content: response.message
                    });
                    $('#url-analyzer-results').hide();
                }
            },
            error: function (xhr, status, error) {
                debugLog('Analysis AJAX error', { status: status, error: error, response: xhr.responseText });
                alert({
                    title: $t('Error'),
                    content: $t('An error occurred while analyzing URLs: ') + error
                });
                $('#url-analyzer-results').hide();
            },
            complete: function () {
                $('#analyze_urls_button').prop('disabled', false);
                $('#analyze_urls_button').find('span').text($t('Analyze Storefront'));
            }
        });
    });
    
    // Select All button
    $(document).on('click', '#select-all-urls', function(e) {
        e.preventDefault();
        var checkboxes = $('#url-analyzer-results .url-list input[type="checkbox"]');
        var allChecked = checkboxes.length === checkboxes.filter(':checked').length;
        
        checkboxes.prop('checked', !allChecked);
        $(this).find('span').text(allChecked ? $t('Select All') : $t('Deselect All'));
        
        return false;
    });
    
    // Add Selected URLs button
    $(document).on('click', '#add-selected-urls', function(e) {
        e.preventDefault();
        var selectedUrls = [];
        $('#url-analyzer-results .url-list input[type="checkbox"]:checked').each(function() {
            selectedUrls.push($(this).val());
        });
        
        debugLog('Adding selected URLs', selectedUrls);
        
        if (selectedUrls.length > 0) {
            // Get current textarea content
            var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
            
            // Add new URLs (ensure no duplicates)
            var existingUrls = currentUrls ? currentUrls.split("\n") : [];
            var newUrls = [];
            
            selectedUrls.forEach(function(url) {
                if (existingUrls.indexOf(url) === -1) {
                    newUrls.push(url);
                }
            });
            
            var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
            
            // Update textarea
            $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
            
            debugLog('Added ' + newUrls.length + ' URLs to custom list');
            
            alert({
                title: $t('Success'),
                content: $t('Added %1 URLs to the custom URL list.').replace('%1', newUrls.length)
            });
        } else {
            debugLog('No URLs selected');
            alert({
                title: $t('Information'),
                content: $t('Please select at least one URL.')
            });
        }
        return false;
    });
	// Upload to GitHub button
    $(document).on('click', '#upload-to-github', function(e) {
        e.preventDefault();
        
        var selectedUrls = [];
        $('#url-analyzer-results .url-list input[type="checkbox"]:checked').each(function() {
            selectedUrls.push($(this).val());
        });
        
        debugLog('Selected URLs for upload', selectedUrls);
        
        if (selectedUrls.length > 0) {
            // Show confirmation dialog
            confirm({
                title: $t('Confirm Upload'),
                content: $t('Do you want to upload %1 selected files to GitHub?').replace('%1', selectedUrls.length),
                actions: {
                    confirm: function() {
                        // Disable button and show progress
                        $('#upload-to-github').prop('disabled', true);
                        $('#upload-to-github').find('span').text($t('Uploading...'));
                        
                        // Show progress indicator and reset
                        $('#upload-progress').show();
                        $('.progress-status').text($t('Initializing upload...'));
                        $('.progress-bar').css('width', '0%');
                        $('.upload-details').show();
                        $('.upload-stats').text($t('Preparing files...'));
                        $('.current-file').text('');
                        
                        // Reset results area
                        $('#upload-result').hide();
                        
                        debugLog('Starting upload to GitHub', {
                            url: uploadUrl,
                            formKey: window.FORM_KEY,
                            urlCount: selectedUrls.length
                        });
                        
                        // Setup upload tracking
                        var totalFiles = selectedUrls.length;
                        var processedFiles = 0;
                        var successfulFiles = 0;
                        var failedFiles = 0;
                        var startTime = new Date().getTime();
                        var results = {
                            details: []
                        };
                        
                        // Process in batches to prevent server overload
                        var batchSize = 10; // Process 10 files at a time
                        var batches = [];
                        
                        // Split files into batches
                        for (var i = 0; i < selectedUrls.length; i += batchSize) {
                            batches.push(selectedUrls.slice(i, i + batchSize));
                        }
                        
                        debugLog('Split upload into ' + batches.length + ' batches of max ' + batchSize + ' files each');
                        
                        // Process batches sequentially
                        processBatch(0);
                        
                        function processBatch(batchIndex) {
                            if (batchIndex >= batches.length) {
                                // All batches completed
                                uploadCompleted();
                                return;
                            }
                            
                            var currentBatch = batches[batchIndex];
                            var batchProgress = 0;
                            var batchSuccesses = 0;
                            var batchFailures = 0;
                            var batchResults = [];
                            
                            // Update progress status
                            var overallProgress = Math.round((processedFiles / totalFiles) * 100);
                            $('.progress-bar').css('width', overallProgress + '%');
                            $('.progress-status').text(
                                $t('Processing batch %1 of %2 (%3%)').replace('%1', batchIndex + 1)
                                .replace('%2', batches.length).replace('%3', overallProgress)
                            );
                            
                            $('.upload-stats').html(
                                $t('Processed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles)
                            );
                            
                            // Calculate progress so far
                            var elapsedSecs = Math.round((new Date().getTime() - startTime) / 1000);
                            var filePerSec = processedFiles > 0 ? (processedFiles / elapsedSecs).toFixed(2) : 0;
                            var remainingSecs = filePerSec > 0 ? Math.round((totalFiles - processedFiles) / filePerSec) : 0;
                            
                            var timeStats = '';
                            if (processedFiles > 0) {
                                timeStats = '<br>' + $t('Elapsed: %1s | Remaining: ~%2s | Speed: %3 files/sec')
                                    .replace('%1', elapsedSecs)
                                    .replace('%2', remainingSecs)
                                    .replace('%3', filePerSec);
                                $('.upload-stats').append(timeStats);
                            }
                            
                            debugLog('Processing batch ' + (batchIndex + 1) + ' of ' + batches.length, currentBatch);
                            
                            // Process each URL in this batch in parallel
                            var batchRequests = [];
                            
                            $.each(currentBatch, function(index, url) {
                                // Update current file display
                                $('.current-file').text(url);
                                
                                // Create deferred object for this file
                                var dfd = $.Deferred();
                                batchRequests.push(dfd.promise());
                                
                                // Upload single file
                                $.ajax({
                                    url: uploadUrl,
                                    type: 'POST',
                                    dataType: 'json',
                                    data: {
                                        form_key: window.FORM_KEY,
                                        urls: JSON.stringify([url]), // Send as array with single item
                                        single_file: true // Flag for server to handle single file upload
                                    },
                                    success: function(response) {processedFiles++;
                                        batchProgress++;
                                        
                                        // Process result
                                        if (response.success && response.results && 
                                            response.results.details && response.results.details.length > 0) {
                                            
                                            var fileResult = response.results.details[0];
                                            if (fileResult.success) {
                                                successfulFiles++;
                                                batchSuccesses++;
                                                debugLog('File upload success: ' + url);
                                            } else {
                                                failedFiles++;
                                                batchFailures++;
                                                debugLog('File upload failed: ' + url, fileResult.message);
                                            }
                                            
                                            // Add to results
                                            results.details.push(fileResult);
                                            
                                            // Update progress immediately
                                            var currentProgress = Math.round((processedFiles / totalFiles) * 100);
                                            $('.progress-bar').css('width', currentProgress + '%');
                                            
                                            $('.upload-stats').html(
                                                $t('Processed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                                .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles)
                                            );
                                            
                                            // Add time stats if available
                                            if (processedFiles > 0) {
                                                var elapsedSecs = Math.round((new Date().getTime() - startTime) / 1000);
                                                var filePerSec = (processedFiles / elapsedSecs).toFixed(2);
                                                var remainingSecs = Math.round((totalFiles - processedFiles) / filePerSec);
                                                
                                                var timeStats = '<br>' + $t('Elapsed: %1s | Remaining: ~%2s | Speed: %3 files/sec')
                                                    .replace('%1', elapsedSecs)
                                                    .replace('%2', remainingSecs)
                                                    .replace('%3', filePerSec);
                                                $('.upload-stats').append(timeStats);
                                            }
                                        } else {
                                            // API returned success but no valid details
                                            failedFiles++;
                                            batchFailures++;
                                            
                                            debugLog('File upload missing details: ' + url, response);
                                            
                                            // Add generic result
                                            results.details.push({
                                                url: url,
                                                success: false,
                                                message: response.message || $t('Unknown error')
                                            });
                                        }
                                        
                                        // Resolve this file's promise
                                        dfd.resolve();
                                    },
                                    error: function(xhr, status, error) {
                                        processedFiles++;
                                        batchProgress++;
                                        failedFiles++;
                                        batchFailures++;
                                        
                                        debugLog('File upload AJAX error: ' + url, { 
                                            status: status, 
                                            error: error, 
                                            response: xhr.responseText
                                        });
                                        
                                        // Add error result
                                        results.details.push({
                                            url: url,
                                            success: false,
                                            message: $t('AJAX error: %1').replace('%1', error)
                                        });
                                        
                                        // Update progress UI
                                        var currentProgress = Math.round((processedFiles / totalFiles) * 100);
                                        $('.progress-bar').css('width', currentProgress + '%');
                                        
                                        $('.upload-stats').html(
                                            $t('Processed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                            .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles)
                                        );
                                        
                                        // Resolve this file's promise (even though it failed)
                                        dfd.resolve();
                                    }
                                });
                            });
                            
                            // When all files in this batch are processed, move to next batch
                            $.when.apply($, batchRequests).then(function() {
                                debugLog('Batch ' + (batchIndex + 1) + ' completed', {
                                    processed: batchProgress,
                                    success: batchSuccesses,
                                    failed: batchFailures
                                });
                                
                                // Small delay before next batch to allow server to breathe
                                setTimeout(function() {
                                    processBatch(batchIndex + 1);
                                }, 500);
                            });
                        }function uploadCompleted() {
                            debugLog('All batches completed', {
                                totalFiles: totalFiles,
                                processed: processedFiles,
                                successful: successfulFiles,
                                failed: failedFiles,
                                elapsedTime: Math.round((new Date().getTime() - startTime) / 1000) + 's'
                            });
                            
                            // Update progress to 100%
                            $('.progress-bar').css('width', '100%');
                            $('.progress-status').text($t('Upload completed'));
                            
                            // Final stats update
                            var elapsedSecs = Math.round((new Date().getTime() - startTime) / 1000);
                            var filePerSec = (processedFiles / elapsedSecs).toFixed(2);
                            
                            $('.upload-stats').html(
                                $t('Completed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles) +
                                '<br>' + $t('Total time: %1s | Avg speed: %2 files/sec')
                                .replace('%1', elapsedSecs)
                                .replace('%2', filePerSec)
                            );
                            
                            // Clear current file display
                            $('.current-file').text($t('Completed'));
                            
                            // Format results for display
                            if (results.details && results.details.length > 0) {
                                var successMessage = $t('Upload completed with %1 successful and %2 failed files.')
                                    .replace('%1', successfulFiles).replace('%2', failedFiles);
                                
                                successMessage += '<br><br><strong>' + $t('Upload Details:') + '</strong><br>';
                                successMessage += '<div class="upload-details-table" style="max-height: 300px; overflow-y: auto; margin-top: 10px;">';
                                successMessage += '<table class="data-table" style="width:100%">';
                                successMessage += '<thead><tr>' +
                                    '<th>' + $t('URL') + '</th>' +
                                    '<th>' + $t('Status') + '</th>' +
                                    '</tr></thead><tbody>';
                                
                                $.each(results.details, function(index, detail) {
                                    var statusClass = detail.success ? 'success' : 'error';
                                    var statusText = detail.success ? 'âœ“ ' + $t('Success') : 'âœ— ' + $t('Failed');
                                    var statusStyle = detail.success ? 'color:green;' : 'color:red;';
                                    var statusMessage = detail.message ? '<br><small>' + detail.message + '</small>' : '';
                                    
                                    successMessage += '<tr>' +
                                        '<td style="word-break: break-all;">' + detail.url + '</td>' +
                                        '<td style="' + statusStyle + '">' + statusText + statusMessage + '</td>' +
                                        '</tr>';
                                });
                                
                                successMessage += '</tbody></table>';
                                successMessage += '</div>';
                                
                                // Display results
                                $('#upload-result').html(successMessage).show();
                                
                                // If there are successful uploads, ask if user wants to add them to custom list
                                if (successfulFiles > 0) {
                                    confirm({
                                        title: $t('Upload Successful'),
                                        content: $t('Do you want to add the successful URLs to your custom URL list?'),
                                        actions: {
                                            confirm: function() {
                                                // Get successful URLs
                                                var successfulUrls = [];
                                                $.each(results.details, function(index, detail) {
                                                    if (detail.success) {
                                                        successfulUrls.push(detail.url);
                                                    }
                                                });
                                                
                                                debugLog('Adding successful URLs to custom list', successfulUrls);
                                                
                                                // Add URLs to custom list
                                                var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
                                                
                                                // Add new URLs (ensure no duplicates)
                                                var existingUrls = currentUrls ? currentUrls.split("\n") : [];
                                                var newUrls = [];
                                                
                                                successfulUrls.forEach(function(url) {
                                                    if (existingUrls.indexOf(url) === -1) {
                                                        newUrls.push(url);
                                                    }
                                                });
                                                
                                                var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
                                                
                                                // Update textarea
                                                $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
                                                
                                                alert({
                                                    title: $t('Success'),
                                                   content: $t('Added %1 URLs to the custom URL list. Remember to click "Save Config" button to save your changes.').replace('%1', newUrls.length)
                                                });
                                            }
                                        }
                                    });
                                }
                            }
                            
                            // Reset upload button
                            $('#upload-to-github').prop('disabled', false);
                            $('#upload-to-github').find('span').text($t('Upload to GitHub'));
                        }
                    }
                }
            });
        } else {
            debugLog('No URLs selected for upload');
            alert({
                title: $t('Information'),
                content: $t('Please select at least one URL to upload.')
            });
        }
        return false;
    });
	// Performance visualization functionality
function updatePerformanceVisualization(urls) {
    if (!urls || urls.length === 0) {
        $('#cdn-performance-visualization').hide();
        return;
    }
    
    // Get existing custom URLs count
    var existingUrls = [];
    var customUrlsTextarea = $('#magoarab_cdn_custom_urls_custom_url_list');
    if (customUrlsTextarea.length && customUrlsTextarea.val().trim()) {
        existingUrls = customUrlsTextarea.val().trim().split("\n").filter(Boolean);
    }
    
    // Calculate performance metrics based on URLs
    var totalUrls = urls.length;
    var totalExistingUrls = existingUrls.length;
    var totalAssets = totalUrls + totalExistingUrls;
    
    // Calculate file size estimates based on URL types
    var totalSize = 0;
    var cdnSize = 0;
    
    $.each(urls, function(index, url) {
        var size = estimateFileSize(url);
        totalSize += size;
        cdnSize += size;
    });
    
    $.each(existingUrls, function(index, url) {
        var size = estimateFileSize(url);
        cdnSize += size;
    });
    
    // Calculate coverage percentage
    var coveragePercentage = Math.min(100, Math.round((totalExistingUrls + urls.length) / Math.max(1, totalAssets) * 100));
    
    // Calculate server load reduction (estimate)
    var serverLoadReduction = Math.min(100, Math.round(cdnSize / Math.max(1, totalSize + cdnSize) * 100));
    
    // Calculate global reach
    var globalReachPercentage = coveragePercentage >= 75 ? 95 : (coveragePercentage >= 50 ? 85 : (coveragePercentage >= 25 ? 70 : 50));
    
    // Estimate loading times (simplified model)
    var beforeLoadingTime = formatLoadingTime(estimateLoadingTime(totalSize, false));
    var afterLoadingTime = formatLoadingTime(estimateLoadingTime(totalSize - cdnSize, true));
    
    // Update the visualization components
    $('.before-loading-time').text(beforeLoadingTime);
    $('.after-loading-time').text(afterLoadingTime);
    
    // Update circular progress
    updateCircularProgress('.cdn-coverage-circle', '.cdn-coverage-value', coveragePercentage);
    updateCircularProgress('.server-load-circle', '.server-load-value', serverLoadReduction);
    updateCircularProgress('.global-reach-circle', '.global-reach-value', globalReachPercentage);
    
    // Show the visualization
    $('#cdn-performance-visualization').fadeIn();
    
    // Log debug info
    debugLog('Performance visualization updated', {
        totalUrls: totalUrls,
        totalExistingUrls: totalExistingUrls,
        totalSize: formatBytes(totalSize),
        cdnSize: formatBytes(cdnSize),
        coveragePercentage: coveragePercentage,
        serverLoadReduction: serverLoadReduction,
        globalReachPercentage: globalReachPercentage,
        beforeLoadingTime: beforeLoadingTime,
        afterLoadingTime: afterLoadingTime
    });
}

// Helper function to update circular progress
function updateCircularProgress(circleSelector, valueSelector, percentage) {
    var circle = $(circleSelector);
    var value = $(valueSelector);
    
    // Calculate the dash offset for the progress circle
    var circumference = 2 * Math.PI * 40; // 2Ï€r, where r = 40
    var dashOffset = circumference - (percentage / 100) * circumference;
    
    // Animate the progress circle
    setTimeout(function() {
        circle.css('stroke-dashoffset', dashOffset);
        
        // Animate the percentage counter
        $({countNum: 0}).animate({countNum: percentage}, {
            duration: 1000,
            easing: 'swing',
            step: function() {
                value.text(Math.floor(this.countNum) + '%');
            },
            complete: function() {
                value.text(percentage + '%');
            }
        });
    }, 100);
}

// Helper function to estimate file size based on URL
function estimateFileSize(url) {
    // Simple estimation based on file type
    if (!url) return 0;
    
    var extension = url.split('.').pop().toLowerCase().split('?')[0];
    
    switch (extension) {
        case 'js':
            return Math.random() * 100000 + 50000; // 50KB to 150KB
        case 'css':
            return Math.random() * 50000 + 25000; // 25KB to 75KB
        case 'jpg':
        case 'jpeg':
            return Math.random() * 200000 + 100000; // 100KB to 300KB
        case 'png':
            return Math.random() * 150000 + 50000; // 50KB to 200KB
        case 'svg':
            return Math.random() * 20000 + 5000; // 5KB to 25KB
        case 'woff':
        case 'woff2':
            return Math.random() * 100000 + 20000; // 20KB to 120KB
        case 'ttf':
        case 'otf':
            return Math.random() * 150000 + 50000; // 50KB to 200KB
        default:
            return Math.random() * 50000 + 10000; // 10KB to 60KB
    }
}

// Helper function to estimate loading time
function estimateLoadingTime(bytes, useCdn) {
    // Use a simple model: 
    // Without CDN: 500KB/s baseline download speed
    // With CDN: 2MB/s baseline download speed (4x faster)
    var baselineSpeed = useCdn ? 2000000 : 500000; // bytes per second
    
    // Add a connection overhead
    var connectionOverhead = useCdn ? 0.1 : 0.3; // seconds
    
    // Calculate time: connection overhead + (bytes / speed)
    return connectionOverhead + (bytes / baselineSpeed);
}

// Helper function to format loading time
function formatLoadingTime(seconds) {
    if (seconds < 0.1) {
        return (seconds * 1000).toFixed(0) + 'ms';
    } else {
        return seconds.toFixed(1) + 's';
    }
}

// Helper function to format bytes
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}
});
</script>